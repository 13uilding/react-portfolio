{"version":3,"sources":["logo.svg","components/Solar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","time","determinePosition","radius","initPosArr","theta","pi","xPos","Math","round","sin","Number","EPSILON","yPos","cos","convertUnits","Solar","useEffect","rotationInterval","setInterval","clearTimeout","console","log","earthPos","setMatter","matter","earth","mars","mercury","moon","venus","useState","date","earthStyle","right","top","marsStyle","mercuryStyle","moonStyle","venusStyle","class","style","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,wICKvCC,G,MAAO,GAGX,SAASC,EAAmBD,EAAME,GAA8B,IAAtBC,EAAqB,uDAAV,CAAC,GAAI,IAEpDC,EAAQC,KANH,KAMcL,EAAa,GAChCM,EAAOC,KAAKC,MAAoE,KAA7DL,EAAW,GAAKD,EAASK,KAAKE,IAAIL,GAASM,OAAOC,UAAkB,IACvFC,EAAOL,KAAKC,MAAoE,KAA7DL,EAAW,GAAKD,EAASK,KAAKM,IAAIT,GAASM,OAAOC,UAAkB,IAC3F,MAAO,CAACL,EAAMM,GAEhB,SAASE,EAAT,GAAsC,IAAD,mBACpC,MAAO,CAD6B,KACpB,KADoB,KACP,MAOf,SAASC,IAIvBC,qBAAU,WACT,IAAIC,EAAmBC,aAAY,YAElClB,GAAQ,KACI,KACXmB,aAAaF,GAEdG,QAAQC,IAAIrB,GACZ,IAAIsB,EAAWrB,EAAmBD,EAAO,GAAK,GAAI,CAAC,GAAI,KACvDuB,EAAU,eACNC,EADK,CAERC,MAAOX,EAAaQ,GACpBI,KAAMZ,EAAab,EAAmBD,EAAO,KAAO,GAAI,CAAC,GAAI,MAC7D2B,QAASb,EAAab,EAAmBD,EAAO,IAAM,GAAI,CAAC,GAAI,MAC/D4B,KAAMd,EAAab,EAAkBD,EAAM,EAAGsB,IAC9CO,MAAOf,EAAab,EAAmBD,EAAO,EAAI,GAAI,CAAC,GAAI,WAE1D,MACD,IAtB4B,MA0BF8B,mBAAS,CACrCL,MAAO,GACPM,KAAM,aACNL,KAAM,GACNC,QAAS,GACTC,KAAM,GACNC,MAAO,KAhCuB,mBA0BvBL,EA1BuB,KA0BfD,EA1Be,KAkCzBS,EAAa,CAClBC,MAAOT,EAAOC,MAAM,GACpBS,IAAKV,EAAOC,MAAM,IAEbU,EAAY,CACjBF,MAAOT,EAAOE,KAAK,GACnBQ,IAAKV,EAAOE,KAAK,IAEZU,EAAe,CACpBH,MAAOT,EAAOG,QAAQ,GACtBO,IAAKV,EAAOG,QAAQ,IAEfU,EAAY,CACjBJ,MAAOT,EAAOI,KAAK,GACnBM,IAAKV,EAAOI,KAAK,IAEZU,EAAa,CAClBL,MAAOT,EAAOK,MAAM,GACpBK,IAAKV,EAAOK,MAAM,IAElB,OACE,yBAAKU,MAAM,YACT,0BAAMA,MAAM,eACf,0BAAMC,MAAOR,EAAYO,MAAM,iBAC/B,0BAAMC,MAAOL,EAAUI,MAAM,gBAC7B,0BAAMC,MAAOJ,EAAaG,MAAM,mBAChC,0BAAMC,MAAOH,EAAUE,MAAM,gBAC7B,0BAAMC,MAAOF,EAAWC,MAAM,kB,MCtElBE,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC3B,EAAD,QCGc4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.73802a76.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\n// Variables\r\nconst pi = 3.14;\r\nvar time = 0;\r\n\r\n// Functions\r\nfunction determinePosition (time, radius, initPosArr=[45, 45]) {\r\n  // The moon completes a rotation every minute\r\n  let theta = pi / 2 + ((time * pi) / 30);\r\n  let xPos = Math.round((initPosArr[0] + radius * Math.sin(theta) + Number.EPSILON) * 100) / 100;\r\n  let yPos = Math.round((initPosArr[1] + radius * Math.cos(theta) + Number.EPSILON) * 100) / 100;\r\n  return [xPos, yPos];\r\n};\r\nfunction convertUnits ([xPos, yPos]) {\r\n\treturn [ xPos + \"vw\", yPos + \"vh\" ];\r\n};\r\n// function setPosition (time, radius) {\r\n// \tlet [ xPos, yPos ] = convertUnits(determinePosition(time, radius))\r\n// \treturn [ xPos, yPos]\r\n// }\r\n// React Export\r\nexport default function Solar() {\r\n\r\n  // // Will run for 5 minutes\r\n  // setTimeout(() => {\r\n\tuseEffect(() => {\r\n\t\tvar rotationInterval = setInterval(() => {\r\n\t\t\t// A bar to increase this increment\r\n\t\t\ttime += 0.2;\r\n\t\t\tif (time >= 3000) {\r\n\t\t\t\tclearTimeout(rotationInterval);\r\n\t\t\t}\r\n\t\t\tconsole.log(time);\r\n\t\t\tlet earthPos = determinePosition((time / 13), 35, [45, 45])\r\n\t\t\tsetMatter({ \r\n\t\t\t\t...matter,\r\n\t\t\t\tearth: convertUnits(earthPos),\r\n\t\t\t\tmars: convertUnits(determinePosition((time / 24.5), 45, [45, 45])),\r\n\t\t\t\tmercury: convertUnits(determinePosition((time / 3.1), 15, [45, 45])),\r\n\t\t\t\tmoon: convertUnits(determinePosition(time, 5, earthPos)),\r\n\t\t\t\tvenus: convertUnits(determinePosition((time / 8), 25, [45, 45])),\r\n\t\t\t})\r\n\t\t}, 20);\r\n\t}, [])\r\n\r\n\t// Get initial position from API call corresponding with the date\r\n\t// Display the date on the top\r\n  const [matter, setMatter] = useState({\r\n\t\tearth: [],\r\n\t\tdate: \"DD-MM-YYYY\",\r\n\t\tmars: [],\r\n\t\tmercury: [],\r\n\t\tmoon: [],\r\n\t\tvenus: []\r\n\t});\r\n\tconst earthStyle = {\r\n\t\tright: matter.earth[0],\r\n\t\ttop: matter.earth[1]\r\n\t}\r\n\tconst marsStyle = {\r\n\t\tright: matter.mars[0],\r\n\t\ttop: matter.mars[1]\r\n\t}\r\n\tconst mercuryStyle = {\r\n\t\tright: matter.mercury[0],\r\n\t\ttop: matter.mercury[1]\r\n\t}\r\n\tconst moonStyle = {\r\n\t\tright: matter.moon[0],\r\n\t\ttop: matter.moon[1]\r\n\t}\r\n\tconst venusStyle = {\r\n\t\tright: matter.venus[0],\r\n\t\ttop: matter.venus[1]\r\n\t}\r\n  return (\r\n    <div class=\"sunEarth\">\r\n      <span class=\"matter sun\"></span>\r\n\t\t\t<span style={earthStyle} class=\"matter earth\"></span>\r\n\t\t\t<span style={marsStyle}class=\"matter mars\"></span>\r\n\t\t\t<span style={mercuryStyle}class=\"matter mercury\"></span>\r\n\t\t\t<span style={moonStyle}class=\"matter moon\"></span>\r\n\t\t\t<span style={venusStyle}class=\"matter venus\"></span>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\n\nimport Solar from './components/Solar';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Solar></Solar>\n    </div>\n  );\n}\n\nexport default App;\n\n\n{/* <header className=\"App-header\">\n<img src={logo} className=\"App-logo\" alt=\"logo\" />\n<p>\n  Edit <code>src/App.js</code> and save to reload.\n</p>\n<a\n  className=\"App-link\"\n  href=\"https://reactjs.org\"\n  target=\"_blank\"\n  rel=\"noopener noreferrer\"\n>\n  Learn React\n</a>\n</header> */}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}